// app/api/debug/database/route.js
import { sql } from '@vercel/postgres';
import { NextResponse } from 'next/server';

export async function GET() {
  try {
    console.log('üîç Debugging database data...');
    
    // R√©cup√©rer toutes les donn√©es
    const { rows } = await sql`
      SELECT * FROM latest_indicators WHERE id = 1;
    `;
    
    if (rows.length === 0) {
      return NextResponse.json({
        error: "‚ùå Aucune donn√©e trouv√©e dans latest_indicators",
        suggestion: "La table existe-t-elle ? Y a-t-il un enregistrement avec id=1 ?"
      });
    }
    
    const data = rows[0];
    console.log('üìä Data found:', data);
    
    // Analyser sp√©cifiquement les donn√©es SARON
    const saronAnalysis = {
      hasSaronData: data.saron_futures_price !== null,
      saronFuturesPrice: data.saron_futures_price,
      marketImpliedRate: data.market_implied_rate,
      marketProbability: data.market_probability,
      dataQuality: "unknown"
    };
    
    // √âvaluer la qualit√© des donn√©es SARON
    if (data.saron_futures_price === null) {
      saronAnalysis.dataQuality = "‚ùå NULL - Pas de donn√©es";
      saronAnalysis.problem = "Les donn√©es SARON ne sont jamais mises √† jour";
    } else if (data.saron_futures_price < 95 || data.saron_futures_price > 105) {
      saronAnalysis.dataQuality = "‚ö†Ô∏è SUSPECT - Valeur hors plage normale";
      saronAnalysis.problem = "La valeur ne ressemble pas √† un prix de futures";
    } else {
      saronAnalysis.dataQuality = "‚úÖ OK - Valeur plausible";
      saronAnalysis.problem = "Aucun probl√®me apparent";
    }
    
    // Calculer ce que √ßa implique si on a les donn√©es
    if (data.saron_futures_price && data.snb_policy_rate_value !== null) {
      const impliedRate = 100 - data.saron_futures_price;
      const expectedChange = data.snb_policy_rate_value - impliedRate;
      const expectedChangeBp = Math.round(expectedChange * 100);
      
      saronAnalysis.calculation = {
        currentSNBRate: data.snb_policy_rate_value,
        impliedRate: parseFloat(impliedRate.toFixed(3)),
        expectedChangeBp: expectedChangeBp,
        interpretation: expectedChangeBp > 0 ? `March√© attend ${expectedChangeBp}bp de BAISSE` :
                       expectedChangeBp < 0 ? `March√© attend ${Math.abs(expectedChangeBp)}bp de HAUSSE` :
                       "March√© attend PAS DE CHANGEMENT"
      };
    }
    
    return NextResponse.json({
      success: true,
      timestamp: new Date().toISOString(),
      summary: {
        saronDataExists: data.saron_futures_price !== null,
        saronValue: data.saron_futures_price,
        dataQuality: saronAnalysis.dataQuality,
        problem: saronAnalysis.problem
      },
      fullData: data,
      saronAnalysis: saronAnalysis,
      nextSteps: [
        data.saron_futures_price === null ? "üîß Impl√©menter la r√©cup√©ration des donn√©es SARON" : null,
        (data.saron_futures_price && (data.saron_futures_price < 95 || data.saron_futures_price > 105)) ? "üîß Corriger la source des donn√©es SARON" : null,
        "üìä Comparer avec les vraies donn√©es de march√©",
        "üîÑ Impl√©menter la mise √† jour automatique"
      ].filter(Boolean)
    });
    
  } catch (error) {
    console.error('‚ùå Debug endpoint error:', error);
    return NextResponse.json({
      success: false,
      error: error.message,
      suggestion: "V√©rifier la connexion √† la base de donn√©es Neon"
    }, { status: 500 });
  }
}